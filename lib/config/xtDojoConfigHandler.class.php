<?php
/**
 * This handler parses dojo.yml files and writes parsed data in a cache file.
 *
 * @package xtDojoPlugin
 * @subpackage config
 * @author Sadikov Vladimir aka DMC <sadikoff@gmail.com>
 * @version 1.0
 */

class xtDojoConfigHandler extends sfDefineEnvironmentConfigHandler
{
  /**
   * Executes this configuration handler.
   *
   * @param string $configFiles An absolute filesystem path to a configuration file
   *
   * @return string Data to be written to a cache file
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable
   * @throws sfParseException If a requested configuration file is improperly formatted
   */
  public function execute($configFiles)
  {
    // get our prefix
    $prefix = strtolower($this->getParameterHolder()->get('prefix', ''));

    // add dynamic prefix if needed
    if ($this->getParameterHolder()->get('module', false))
    {
      $prefix .= "'.strtolower(\$moduleName).'_";
    }

    $config = array();

    $countFiles = count($configFiles);

    for ( $i = 0; $i < $countFiles; $i++ ) {
      $configuration = self::parseYaml($configFiles[$i]);

      if ( $i == 0 ) {
        foreach ($configuration as $key => $value) {
          $config = array_merge($config, $value);
        }
      } else {
        foreach ($configuration as $key => $value) {
          if ($key == 'default') {
            foreach ($value as $key_ => $value_) {
              $config[$key_] = $value_;
            }
          } else {
            foreach ($value as $key_ => $value_) {
              is_array($config[$key_]) && key_exists($key_, $config) ? null : $config[$key_] = array();
              is_array($value_) ? null : $value_ = array();
              if ( $key_ == 'theme' ) {
                $config[$key_] = array_merge($config[$key_],$value_);
              } else {
                $config[$key_] = array_merge_recursive($config[$key_],$value_);
              }
            }
          }
        }
      }
      
    }

    $values = array();
    foreach ($config as $category => $keys)
    {
      $values = array_merge($values, $this->getValues($prefix, $category, $keys));
    }

    $data = '';
    foreach ($values as $key => $value)
    {
      $data .= sprintf("  '%s' => %s,\n", $key, var_export($value, true));
    }

    // compile data
    $retval = '';
    if ($values)
    {
      $retval = "<?php\n".
                "// auto-generated by xtDojoConfigHandler\n".
                "// date: %s\nsfConfig::add(array(\n%s));\n";
      $retval = sprintf($retval, date('Y/m/d H:i:s'), $data);
    }

    return $retval;
  }

  /**
   * Gets values from the configuration array.
   *
   * @param string $prefix    The prefix name
   * @param string $category  The category name
   * @param mixed  $keys      The key/value array
   *
   * @return array The new key/value array
   */
  protected function getValues($prefix, $category, $keys)
  {
    $key = $prefix.$category;
    $value = $keys;

    $values = array($key => $value);

    return $values;
  }

}
